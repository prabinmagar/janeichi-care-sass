 
 
  /* #### Importing fonts #### */
  @mixin font-face($font-name, $file-name, $weight: normal, $style: normal) { 
    @font-face {
      font-family: quote($font-name);
      src: url($file-name + '.eot');
      src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
           url($file-name + '.woff') format('woff'),
           url($file-name + '.ttf')  format('truetype'),
           url($file-name + '.svg##{$font-name}')  format('svg');
      font-weight: $weight;
      font-style: $style;
    }
}
 
 /* #### Adding Vendor Prefixes to the CSS #### */
 @mixin prefixer($prop, $value) {
    -webkit-#{$prop}: #{$value};
    -moz-#{$prop}: #{$value};
    -ms-#{$prop}: #{$value};
    -o-#{$prop}: #{$value};
    #{$prop}: #{$value};
}

 /* ########## Fonts ######### */
 @mixin font($family: false, $size: false, $color: false, $weight: false, $lh: false){
    @if $family{font-family: $family;}
    @if $size{font-size: calculateRem($size);}
    @if $size{font-size: $size#{px};}
    @if $color{color: $color;}
    @if $weight{font-weight: $weight;}
    @if $lh{line-height: $lh;}
}

@mixin font-s($size, $line-height: normal, $letter-spacing: normal){
    font-size: $size#{px};
    font-size: calculateRem($size);

    @if $line-height == normal{
        // line-height: normal;
        line-height: $leading-base;
    } @else {
        line-height: $line-height / $size;
    }

    @if $letter-spacing == normal{
        letter-spacing: normal;
    } @else {
        letter-spacing: #{$letter-spacing/$size}em!important;
    }
}

@mixin line-height($height: 12, $base: 16){
    line-height: $height + px;
    line-height: ($height / $base) * 1rem;
}


/* ########### font weights ########## */
@mixin font-w($weight){
    $output: $weight;
    @if map-has-key($font-weights, $weight){
        $output: map-get($font-weights, $weight);
    }
    font-weight: $output;
}

/* ########### Breakpoints ########## */
@mixin breakpoint-up($size){
    @media(min-width: map-get($breakpoints-up, $size)){
        @content;
    }
}

@mixin breakpoint-down($size){
    @media(max-width: map-get($breakpoints-down, $size)){
        @content;
    }
}

 /* ########### Background ########## */
 @mixin bg-cover($attachment: false){
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    @if $attachment{background-attachment: $attachment;}
}

@mixin bg-transparent{
    background-color: transparent!important;
}

@mixin bg-color($color){
    $output: $color;
    $temp-color: "clr-" + $color;
    @if map-has-key($colors, $temp-color){
        $output: map-get($colors, $temp-color);
    }

    background-color: $output;
}

@mixin bg-none{
    background: none!important;
}

@mixin overlay{
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
}

/* ########### Forms ########## */
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

/* ########### Animation ########## */
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};      
}

/* ########### Transition ########## */
@mixin transition-default{
    transition: $default-transition;
}

@mixin transition($args...){
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args; 
    -o-transition: $args; 
    transition: $args; 
}

/* ########### Box sizing ########## */
@mixin box-sizing($type){
    -webkit-box-sizing:$type; // Safari <= 5
    -moz-box-sizing:$type; // Firefox <= 19
    box-sizing:$type;
}
@mixin box($width, $height: $width){
    width: $width;
    height: $height;
}
@mixin w-100{
    width: 100%;
}
@mixin h-100 {
    height: 100%;
}
@mixin vh-100{
    height: 100vh;
}
@mixin vw-100{
    width: 100vw;
}

/* ########### Opacity ########## */
@mixin opacity($opacity){
    opacity: $opacity;
    filter: alpha(opacity=($opacity * 100));
}

/* ###### Border and Border Radius ####### */
@mixin border($border-color: black, $border-size: 1px, $border-position: all, $border-pattern: solid, $border-clear: none ) {
    @if $border-position == all {
      border: $border-size $border-pattern $border-color;
    }
    @else {
      border-#{$border-position}: $border-size
      $border-pattern $border-color;
    }
    @if $border-clear == none {
      $border-position: all;
    }
    @else {
      border-#{$border-clear}: none;
    }
}

@mixin border-none{
    border: none!important;
}

@mixin border-radius($top-left: null, $top-right:null, $bottom-right:null, $bottom-left:null){
    -webkit-border-radius: $top-left $top-right $bottom-right $bottom-left;
    -moz-border-radius: $top-left $top-right $bottom-right $bottom-left;
    -ms-border-radius: $top-left $top-right $bottom-right $bottom-left;
    border-radius: $top-left $top-right $bottom-right $bottom-left;  
}

@mixin border-r-circle{
    @include border-radius(100%);
}

@mixin border-r-none{
    border-radius: 0!important;
}

/* ########### Positioning ########## */
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $z-index: initial){
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    z-index: $z-index;
}

@mixin pos-absolute($args...){
    @include position(absolute, $args...);
}

@mixin pos-relative($args...){
    @include position(relative, $args...);
}

@mixin pos-fixed($args...){
    @include position(fixed, $args...);
}

@mixin pos-center($position) {
    position: absolute;
    @if $position == 'vertical' {
      top: 50%;
      -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      transform: translateY(-50%);
    } @else if $position == 'horizontal' {
      left: 50%;
      -webkit-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
      transform: translate(-50%);
    } @else if $position == 'both' {
      top: 50%;
      left: 50%;
      -webkit-transform: translate(-50%, -50%);
      -ms-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
    }
}


/* ########### Grid ########## */
@mixin grid{
	display: -ms-grid;
    display: grid;
}

// $columns values should be delimited by a space
@mixin grid-template-columns($columns...) {
    @include grid;
    -ms-grid-columns: $columns;
    grid-template-columns: $columns;
}

// $rows values should be delimited by a space
@mixin grid-template-rows($rows...) {
    @include grid;
    -ms-grid-rows: $rows;
    grid-template-rows: $rows;
}

// grid helper placeholder
%grid-helpers-base{
    @include breakpoint-up(md){
        @include grid;
        @include grid-template-columns(1fr);
    }
}

@mixin cols-repeat($breakpoint, $times){
    @extend %grid-helpers-base;
    @include breakpoint-up($breakpoint){
        @include grid-template-columns(repeat(#{$times}, 1fr));
    }
}

@mixin cols-auto-fit($breakpoint){
    @extend %grid-helpers-base;
    @include breakpoint-up($breakpoint){
        grid-template-columns: repeat(auto-fill, minmax(#{"min(300px, 100%)"}, 1fr));
    }
}

/* ########### Flexbox ########## */
@mixin inline-flex{
    display: inline-flex;
}

// Flexbox Direction
@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

// Shorter version:
@mixin flex-dir($value: false) { 
    @include flex-direction($value); 
}

// Flexbox Wrap
@mixin flex-wrap($value: nowrap) {
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

// Flexbox Flow (shorthand)
@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

// Flexbox Order
@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

// Flexbox Grow
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

// Flexbox Shrink
@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

// Flexbox Basis
@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

// Flexbox "Flex" (shorthand)
@mixin flex($fg: 1, $fs: null, $fb: null) {
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

// Flexbox Justify Content
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

// Shorter version:
@mixin flex-just($value: flex-start) { 
    @include justify-content($value); 
}

// Flexbox Align Items
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

// Flexbox Align Self
@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

// Flexbox Align Content
@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

// flexbox tookit
@mixin flex-center{
    @extend %flexbox;
    @include align-items(center);
    @include justify-content(center);
}

@mixin inline-flex-center{
    @extend %flexbox;
    @include align-content(center);
    @include justify-content(center);
}

@mixin flex-column{
    @extend %flexbox;
    @include flex-direction(column);
}

@mixin flex-center-column{
    @include flex-center;
    @include flex-direction(column);
}

@mixin flex-center-vert{
    @extend %flexbox;
    @include align-items(center);
}

@mixin flex-center-horiz{
    @extend %flexbox;
    @include align-items(center);
}

/* ########### Gradient ########## */
@mixin gradient($start-color, $end-color, $orientation){
    background-color: $start-color;
    @if $orientation == vertical{
        // vertical
        background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
    } @else if $orientation == horizontal{
        // horizontal
        background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
    } @else {
        // radial
        background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
    }
}

@mixin circle($width, $height, $color){
    width: $width;
    height: $height;
    border-radius: 50%;
    background: $color;
}

/* #### Truncate text on text overflow ### */
@mixin truncate-text($truncation-boundary: false, $overflow: ellipsis){
    @if $truncation-boundary{max-width: $truncation-boundary;}
    max-width: $truncation-boundary;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: $overflow; // Text is clipped and the clipped text is represented as ‘…’.
}

/* ########### Pseudo stylings ########## */
@mixin pseudo($display: block, $pos: absolute, $content: ""){
    content: $content;
    display: $display;
    position: $pos;
}

 /* ########### Visibility & Display ########## */
 @mixin fade($type) {
    @if $type== "hide" {
      visibility: hidden;
      opacity: 0;
      transition: visibility 1s, opacity 1s;
    } @else if $type== "show" {
      visibility: visible;
      opacity: 1;
      transition: visibility 1s, opacity 1s;
    }
}
// hide from both screenreaders and browsers
@mixin hidden {
	display: none;
	visibility: hidden;
}

@mixin visible($state: 'block') {
	display: unquote($state);
	visibility: visible;
}

// Hide only visually, but have it available for screenreaders
@mixin vh($focusable: false) {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;

	@if $focusable {
		@include vh-focusable;
	}
}

@mixin vh-reset {
	clip: auto;
	height: auto;
	margin: 0;
	overflow: visible;
	position: static;
	width: auto;
}

// Hide visually and from screenreaders, but maintain layout
@mixin invisible {
	visibility: hidden;
}

/* ###########  padding & margins ########## */
@mixin p($top: null, $right: null, $bottom: null, $left: null){
    padding-top: $top;
    padding-right: $right;
    padding-bottom: $bottom;
    padding-left: $left;
}

@mixin p-all($value){
    padding: $value;
}

@mixin py($top, $bottom: $top){
    padding-top: $top;
    padding-bottom: $bottom;
}

@mixin px($left, $right: $left){
    padding-left: $left;
    padding-right: $right;
}

@mixin m($top: null, $right: null, $bottom: null, $left: null){
    margin-top: $top;
    margin-right: $right;
    margin-bottom: $bottom;
    margin-left: $left;
}

@mixin m-all($value){
    margin: $value;
}

@mixin my($top, $bottom: $top){
    margin-top: $top;
    margin-bottom: $bottom;
}

@mixin mx($left, $right: $left){
    margin-left: $left;
    margin-right: $right;
}

// margin auto
@mixin push--auto{
    @extend %block;
    margin-right: auto;
    margin-left: auto;
}

// remove margins
@mixin flush{margin: 0;}
@mixin flush--top { margin-top: 0; }
@mixin flush--bottom { margin-bottom: 0; }
@mixin flush--left { margin-left: 0; }
@mixin flush--right { margin-right: 0; }

@mixin flush--ends { 
    margin: { 
        top: 0; 
        bottom: 0; 
    } 
}

@mixin flush--sides { 
    margin: { 
        left: 0; 
        right: 0; 
    } 
}

// remove padding
@mixin hard { padding: 0; }
@mixin hard--top { padding-top: 0; }
@mixin hard--bottom { padding-bottom: 0; }
@mixin hard--left { padding-left: 0!important; }
@mixin hard--right { padding-right: 0; }

@mixin hard--ends { 
    padding: { 
        top: 0; 
        bottom: 0; 
    } 
}

@mixin hard--sides { 
    padding: { 
        left: 0; 
        right: 0; 
    } 
}

/* ########### Misc ########## */
@mixin antialias {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin appearance($val: none) {
	-webkit-appearance: $val;
	-moz-appearance: $val;
	appearance: $val;
}

/* ########### list ########## */
@mixin list-reset{
    margin: 0;
    padding: 0;
    list-style-type: none;
}

// box shadow
@mixin shadow-none{
    box-shadow: none!important;
}

// image
@mixin img-cover{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: top;
}

// display
@mixin d-none{ display: none!important; }
@mixin d-block{ display: block!important; }
@mixin d-inline-block{display: inline-block;}
@mixin d-inline-block{ display: inline-block!important;}
@mixin d-inline-flex{display: inline-flex!important;}
@mixin d-flex{display: flex;}

// Extra mixins
/* ==========================================================================
   This mixin takes all the hassle out of creating that triangle you'll see coming out of most traditional tooltips, all without images, you just specify it's colour, how big you want it, the direction it's going to come out of your element and you're done!
   ========================================================================== */
   @mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

@mixin unlist($margin: true, $padding: true) {
	@if $margin {
		@if $margin == 'vertical' {
			@include flush--ends;
		} @else if $margin == 'horizontal' {
			@include flush--sides;
		} @else {
			margin: 0;
		}
	}
	@if $padding {
		padding: 0;
	}
	list-style: none;
}

// The user-select property specifies whether the text of an element can be selected. In web browsers, if you double-click on some text it will be selected/highlighted. This property can be used to prevent this.
@mixin unselectable {
	-webkit-touch-callout: none;
	user-select: none;
}

// The ::selection CSS pseudo-element applies styles to the part of a document that has been highlighted by the user (such as clicking and dragging the mouse across text).
@mixin selection {
	::-moz-selection { @content; }
	::selection { @content; }
}

// Allow the element to be focusable when navigated to via the keyboard
@mixin vh-focusable {
	&:active,
	&:focus {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto;
	}
}

// Contain floats / clearfix

@mixin cf{
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}


@mixin width($width, $type: null){
    @if $type == max{
        max-width: $width;
    } @else if $type == min{
        min-width: $width;
    } @else {
        width: $width;
    }
}

@mixin height($height, $type: null){
    @if $type == max{
        max-height: $height;
    } @else if $type == min{
        min-height: $height;
    } @else{
        height: $height;
    }
}

// Background Image
@mixin bg-img-full($path,  $position: center, $size: cover, $repeat: no-repeat, $gradient: null, $attachment: null){
    background: $gradient url('#{path}') $pos/$size $repeat, ;
}

// Arrow with four optional directions
@mixin arrow($direction: down, $size: 5px, $color: #555){
    width: 0;
    height: 0;
    @if($direction == left){
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    } @else if($direction == right){
        border-top: $size solid transparent;
        border-right: $size soild transparent;
        border-top: $size solid $color;
    } @else if($direction == down){
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
    } @else {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    }
}

// Hardware - Simple and effective for when you need to trigger hardware acceleration for some animation, keeping everything fast, slick and flicker-free.
@mixin hardware($backface: true, $perspective: 1000){
    @if $backface{
        backface-visibility: hidden;
    }
    perspective: $perspective;
}

// overflow
@mixin overflow-hidden{
    overflow: hidden;
}